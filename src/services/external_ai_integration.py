#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ARQV30 Enhanced v3.0 - External AI Verifier Integration
Integra√ß√£o do m√≥dulo External AI Verifier ao app principal
"""

import os
import sys
import logging
import json
from typing import Dict, Any, Optional
from datetime import datetime
import asyncio

logger = logging.getLogger(__name__)

class ExternalAIVerifierIntegration:
    """Integra√ß√£o do External AI Verifier com o app principal"""

    def __init__(self):
        """Inicializa a integra√ß√£o"""
        # Adiciona o caminho do m√≥dulo externo ao Python path
        external_module_path = os.path.join(os.getcwd(), "external_ai_verifier", "src")
        if external_module_path not in sys.path:
            sys.path.insert(0, external_module_path)

        self.module_available = self._check_module_availability()

        if self.module_available:
            logger.info("‚úÖ External AI Verifier integrado com sucesso")
        else:
            logger.warning("‚ö†Ô∏è External AI Verifier n√£o dispon√≠vel - executando em modo fallback")

    def _check_module_availability(self) -> bool:
        """Verifica se o m√≥dulo External AI Verifier est√° dispon√≠vel"""
        try:
            from external_review_agent import ExternalReviewAgent
            return True
        except ImportError as e:
            logger.warning(f"External AI Verifier n√£o encontrado: {e}")
            return False

    async def verify_session_data(self, session_id: str) -> Dict[str, Any]:
        """
        Executa verifica√ß√£o dos dados de uma sess√£o espec√≠fica

        Args:
            session_id (str): ID da sess√£o para verificar

        Returns:
            Dict[str, Any]: Resultado da verifica√ß√£o
        """
        try:
            if not self.module_available:
                return self._fallback_verification_result(session_id)

            logger.info(f"üîç Iniciando verifica√ß√£o AI para sess√£o: {session_id}")

            # Importa o agente de verifica√ß√£o com caminho correto
            import sys
            import os
            external_path = os.path.join(os.getcwd(), "external_ai_verifier", "src")
            if external_path not in sys.path:
                sys.path.insert(0, external_path)

            from external_review_agent import ExternalReviewAgent

            # Cria inst√¢ncia do agente
            agent = ExternalReviewAgent()

            # Executa an√°lise da sess√£o
            result = await agent.analyze_session_consolidacao(session_id)

            if result.get('success', False):
                logger.info(f"‚úÖ Verifica√ß√£o AI conclu√≠da para sess√£o {session_id}")
                logger.info(f"üìä Items processados: {result.get('total_items', 0)}")
                logger.info(f"‚úÖ Aprovados: {result.get('statistics', {}).get('approved_count', 0)}")
                logger.info(f"‚ùå Rejeitados: {result.get('statistics', {}).get('rejected_count', 0)}")
            else:
                logger.error(f"‚ùå Falha na verifica√ß√£o AI: {result.get('error', 'Erro desconhecido')}")

            return result

        except Exception as e:
            logger.error(f"‚ùå Erro durante verifica√ß√£o AI: {e}")
            return {
                'success': False,
                'error': str(e),
                'session_id': session_id,
                'timestamp': datetime.now().isoformat(),
                'fallback_used': True
            }

    async def verify_batch_data(self, input_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        Executa verifica√ß√£o de um lote de dados

        Args:
            input_data (Dict[str, Any]): Dados para verifica√ß√£o

        Returns:
            Dict[str, Any]: Resultado da verifica√ß√£o
        """
        try:
            if not self.module_available:
                return self._fallback_batch_result(input_data)

            logger.info(f"üîç Iniciando verifica√ß√£o AI em lote: {len(input_data.get('items', []))} itens")

            # Importa o agente de verifica√ß√£o com caminho correto
            import sys
            import os
            external_path = os.path.join(os.getcwd(), "external_ai_verifier", "src")
            if external_path not in sys.path:
                sys.path.insert(0, external_path)

            from external_review_agent import ExternalReviewAgent

            # Cria inst√¢ncia do agente
            agent = ExternalReviewAgent()

            # Executa an√°lise em lote
            result = await agent.analyze_content_batch(input_data)

            if result.get('success', False):
                logger.info(f"‚úÖ Verifica√ß√£o AI em lote conclu√≠da")
                logger.info(f"üìä Items processados: {result.get('total_items', 0)}")
                stats = result.get('statistics', {})
                logger.info(f"‚úÖ Aprovados: {stats.get('approved_count', 0)}")
                logger.info(f"‚ùå Rejeitados: {stats.get('rejected_count', 0)}")
            else:
                logger.error(f"‚ùå Falha na verifica√ß√£o AI em lote")

            return result

        except Exception as e:
            logger.error(f"‚ùå Erro durante verifica√ß√£o AI em lote: {e}")
            return {
                'success': False,
                'error': str(e),
                'timestamp': datetime.now().isoformat(),
                'fallback_used': True
            }

    def _fallback_verification_result(self, session_id: str) -> Dict[str, Any]:
        """Resultado fallback quando o m√≥dulo n√£o est√° dispon√≠vel"""
        return {
            'success': True,
            'session_id': session_id,
            'total_items': 0,
            'statistics': {
                'approved_count': 0,
                'rejected_count': 0,
                'flagged_count': 0,
                'average_confidence': 0.0
            },
            'items': [],
            'rejected_items': [],
            'metadata': {
                'fallback_mode': True,
                'message': 'External AI Verifier n√£o dispon√≠vel - modo fallback ativo',
                'timestamp': datetime.now().isoformat()
            },
            'fallback_used': True
        }

    def _fallback_batch_result(self, input_data: Dict[str, Any]) -> Dict[str, Any]:
        """Resultado fallback para verifica√ß√£o em lote"""
        items_count = len(input_data.get('items', []))
        return {
            'success': True,
            'total_items': items_count,
            'statistics': {
                'approved_count': items_count,  # Aprova todos em modo fallback
                'rejected_count': 0,
                'flagged_count': 0,
                'average_confidence': 1.0
            },
            'items': input_data.get('items', []),
            'rejected_items': [],
            'metadata': {
                'fallback_mode': True,
                'message': 'External AI Verifier n√£o dispon√≠vel - todos os itens aprovados por fallback',
                'timestamp': datetime.now().isoformat()
            },
            'fallback_used': True
        }

    def get_status(self) -> Dict[str, Any]:
        """Retorna status da integra√ß√£o"""
        return {
            'module_available': self.module_available,
            'integration_active': True,
            'timestamp': datetime.now().isoformat()
        }

# Inst√¢ncia global
external_ai_integration = ExternalAIVerifierIntegration()